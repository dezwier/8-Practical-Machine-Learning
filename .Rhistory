library(caret)
?caret
??caret
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("pgmm")
library(pgmm)
library(rpart)
library(gbm)
install.packages("gbm")
library(gbm)
library(lubridate)
library(forecast)
install.packages(forecast)
install.packages("forecast")
library(forecast)
install.packages("e1071")
library(e1071)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
view(vowel.train)
View(vowel.test)
vowel.test$y <- factor(vowel.test$y)
levels(vowel.test$y)
set.seed(33833)
modFit <- train(vowel.test$y~ .,data=vowel.train,method="rf",prox=TRUE)
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit
pred <- predict(modFit,vowel.test)
pred
levels(vowel.test$y)
levels(vowel.train$y)
levels(vowel.train$y)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
pred <- predict(modFit,vowel.test)
pred
modFit
pred
sum(pred==vowel.test$y))
sum(pred==vowel.test$y)
length(vowel.test)
row(vowel.test)
length(vowel.test)
sum(pred==vowel.test$y)
sum(pred==vowel.test$y) / 462
sum(pred==vowel.test$y) / 461
sum(pred==vowel.test$y) / 462
modFit <- train(y~.,data=vowel.train,method="gbm",prox=TRUE)
gbm <- train(y ~ ., method="gbm", data=vowel.train, verbose=F)
modFit <- train(y~.,data=vowel.train,method="gbm")
modFit <- train(y~.,data=vowel.train,method="gbm", verbose=FALSE)
pred <- predict(modFit,vowel.test)
pred2 <- predict(gbm,vowel.test)
sum(pred==vowel.test$y) / 462
sum(pred2==vowel.test$y) / 462
modFit <- train(y~.,data=vowel.train,method="rf", verbose=FALSE)
pred <- predict(modFit,vowel.test)
sum(pred==vowel.test$y) / 462
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433 )
View(training)
modFit <- train(diagnosis~.,data=training,method="rf",verbose=FALSE)
modFit <- train(diagnosis~.,data=training,method="gbm",verbose=FALSE)
modFit <- train(diagnosis~.,data=training,method="rf",verbose=FALSE)
modFit2 <- train(diagnosis~.,data=training,method="gbm",verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training,method="lda",verbose=FALSE)
pred_rf = predict(modFit1, training)
pred_gbm = predict(modFit2, training)
pred_lda = predict(modFit3, training)
pred_rf = predict(modFit, training)
pred_gbm = predict(modFit2, training)
pred_lda = predict(modFit3, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_rf_test = predict(modFit, testing)
pred_gbm_test = predict(modFit2, testing)
pred_lda_test = predict(modFit3, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
accuracy_rf
accuracy_gbm
accuracy_lda
accuracy_comb
rm(list = ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf = train(diagnosis ~ ., method = 'rf', data = training)
model_gbm = train(diagnosis ~ ., method = 'gbm', data = training)
model_lda = train(diagnosis ~ ., method = 'lda', data = training)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
accuracy_comb
accuracy_lda
accuracy_gbm
accuracy_rf
install.packages("rattle")
data(AlzheimerDisease)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model = train(CompressiveStrength ~ ., method = 'lasso', data = training, verbose = FALSE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model = train(CompressiveStrength ~ ., method = 'lasso', data = training)
plot(model$finalModel)
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model, h=length(tsrem),level=c(95))
training = dat[year(dat$date) == 2011,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model, h=length(tsrem),level=c(95))
accuracy(pred, remdata$visitsTumblr)
acc = sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
acc
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = training)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
training = read.csv("pml-training.csv")
testing = read.csv("pml-testing.csv")
View(training)
training$classe
levels(training$classe)
